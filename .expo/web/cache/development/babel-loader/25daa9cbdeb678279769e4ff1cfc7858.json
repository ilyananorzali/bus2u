{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\bus2u\\\\BUS2U-main\\\\src\\\\screens\\\\MapScreen.js\";\n\nimport React, { useEffect } from 'react';\nimport Bottom from \"./components/Bottom\";\nimport Maps from \"./components/Maps\";\nimport { useSelector } from 'react-redux';\nimport { selectMap, selectDestination, selectArrived } from \"./slices/navSlice\";\nimport { useDispatch } from 'react-redux';\nimport VerticalWrapper from \"./components/Vertical/VerticalWrapper\";\nimport { useNavigation } from '@react-navigation/native';\n\nvar MapScreen = function MapScreen(_ref) {\n  var route = _ref.route;\n  var initialRouteName = route.params.initialRouteName;\n  var initialRoute = JSON.stringify(initialRouteName);\n  var map = useSelector(selectMap);\n  var arrived = useSelector(selectArrived);\n  var dispatch = useDispatch();\n  var navigation = useNavigation();\n  useEffect(function () {\n    +console.log(arrived, '19');\n\n    if (arrived === true) {\n      navigation.navigate('End');\n    }\n  }, [map, arrived]);\n  return React.createElement(React.Fragment, null, map === true ? React.createElement(Maps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }) : React.createElement(VerticalWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }), React.createElement(Bottom, {\n    initialRouteName: initialRoute,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default MapScreen;","map":{"version":3,"sources":["C:/Users/Asus/Desktop/bus2u/BUS2U-main/src/screens/MapScreen.js"],"names":["React","useEffect","Bottom","Maps","useSelector","selectMap","selectDestination","selectArrived","useDispatch","VerticalWrapper","useNavigation","MapScreen","route","initialRouteName","params","initialRoute","JSON","stringify","map","arrived","dispatch","navigation","console","log","navigate"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP;AACA,OAAOC,IAAP;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAASC,SAAT,EAAoBC,iBAApB,EAAuCC,aAAvC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,eAAP;AACA,SAASC,aAAT,QAA8B,0BAA9B;;AAGA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAa;AAAA,MAAXC,KAAW,QAAXA,KAAW;AAE7B,MAAQC,gBAAR,GAA6BD,KAAK,CAACE,MAAnC,CAAQD,gBAAR;AAEA,MAAIE,YAAY,GAAGC,IAAI,CAACC,SAAL,CAAeJ,gBAAf,CAAnB;AAGA,MAAMK,GAAG,GAAGd,WAAW,CAACC,SAAD,CAAvB;AACA,MAAMc,OAAO,GAAGf,WAAW,CAACG,aAAD,CAA3B;AACA,MAAMa,QAAQ,GAAGZ,WAAW,EAA5B;AACA,MAAMa,UAAU,GAAGX,aAAa,EAAhC;AAEET,EAAAA,SAAS,CAAC,YAAM;AAAC,KACfqB,OAAO,CAACC,GAAR,CAAYJ,OAAZ,EAAsB,IAAtB,CADe;;AAEf,QAAGA,OAAO,KAAK,IAAf,EAAoB;AAElBE,MAAAA,UAAU,CAACG,QAAX,CAAoB,KAApB;AACD;AACF,GANQ,EAMN,CAACN,GAAD,EAAMC,OAAN,CANM,CAAT;AASA,SACA,0CAEID,GAAG,KAAK,IAAR,GACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,GAGE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALN,EASE,oBAAC,MAAD;AAAQ,IAAA,gBAAgB,EAAEH,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADA;AAeH,CApCD;;AAsCA,eAAeJ,SAAf","sourcesContent":["import React, {useEffect} from 'react'\r\nimport Bottom from './components/Bottom'\r\nimport Maps from './components/Maps'\r\nimport {useSelector} from 'react-redux'\r\nimport { selectMap, selectDestination, selectArrived } from './slices/navSlice'\r\nimport { useDispatch } from 'react-redux'\r\nimport VerticalWrapper from './components/Vertical/VerticalWrapper'\r\nimport { useNavigation } from '@react-navigation/native'\r\n\r\n\r\nconst MapScreen = ({route}) => {\r\n\r\n  const { initialRouteName } = route.params;\r\n\r\n  let initialRoute = JSON.stringify(initialRouteName)\r\n\r\n\r\n  const map = useSelector(selectMap)\r\n  const arrived = useSelector(selectArrived)\r\n  const dispatch = useDispatch()\r\n  const navigation = useNavigation()\r\n\r\n    useEffect(() => {+\r\n      console.log(arrived , '19')\r\n      if(arrived === true){\r\n        \r\n        navigation.navigate('End')\r\n      }\r\n    }, [map, arrived])\r\n\r\n\r\n    return (\r\n    <>\r\n      {\r\n        map === true ? (\r\n          <Maps />\r\n          ): \r\n          <VerticalWrapper />\r\n      }\r\n     \r\n\r\n      <Bottom initialRouteName={initialRoute} />\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MapScreen\r\n"]},"metadata":{},"sourceType":"module"}